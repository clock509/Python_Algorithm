#일반적인 선택 정렬.
#입력: 리스트 a
#출력: 없음(입력으로 주어진 a가 정렬됨)

def sel_sort(a):
    n = len(a)
    for i in range(0, n-1): #0~n-2까지 반복
        #i번 위치부터 끝까지 자료 값 중 최솟값의 위치를 찾음
        min_idx = i
        for j in range(i+1, n):
            if a[j] < a[min_idx]:
                min_idx = j
        #찾은 최솟값을 i번 위치로
        a[i], a[min_idx] = a[min_idx], a[i]
        #print(a) #중간과정 출력

d = [2, 4, 5, 1, 3]
sel_sort(d)
print(d)


#Tip
#14번 문장: 리스트 안에서 두 자료 값의 위치를 서로 바꾸는 방법: 쉼표를 이용해 변수를 뒤집어 표현한다(ex) x, y = y, x
#ex. x = 1
#    y = 2
#    x, y = y, x
#print(x) ==> 2
#print(y) ==> 1


#선택 정렬 알고리즘 분석
#자료를 크기 순서로 정렬하려면 두 수의 크기를 비교해야 함.  ==>  따라서 정렬 알고리즘의 계산 복잡도는 비교 횟수를 기준으로 따짐.
#n개의 자료가 있다면 비교를 총 n(n-1)/2번 하는 알고리즘.
#선택 정렬 알고리즘의 계산 복잡도 = O(n^2)
#비교 횟수가 입력 크기의 제곱에 비례하므로 입력 크기가 커질수록 정렬하는데 드는 시간이 오래 걸림.

